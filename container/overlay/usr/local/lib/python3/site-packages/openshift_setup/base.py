import json
import yaml

from pathlib import Path
from pydantic import BaseModel as PydanticBaseModel


class BaseModel(PydanticBaseModel):
    """A customized base class to reuse behaviors."""

    class PydanticEncoder(json.JSONEncoder):
        """Serialize Pydantic models.

        A JSONEncoder subclass that prepares Pydantic models for serialization.
        """

        def default(self, obj):
            """Encode model objects based on their type."""
            if isinstance(obj, BaseModel) and callable(obj.dict):
                return obj.dict(exclude_none=True)
            elif isinstance(obj, Path):
                return str(obj.resolve())
            elif isinstance(obj, set):
                return list(obj)
            elif getattr(obj, '__serialize__') is not None:
                return obj.__serialize__()

            return json.JSONEncoder.default(self, obj)

    @classmethod
    def from_yaml(cls, yaml_text: str) -> 'BaseModel':
        """Instantiate a BaseModel from a YAML string."""
        return cls.parse_obj(yaml.safe_load(yaml_text))

    def to_json(self) -> str:
        """Serialize a BaseModel as a JSON string."""
        return json.dumps(self, cls=self.PydanticEncoder)

    def to_yaml(self, *args, **kwargs) -> str:
        """Serialize a BaseModel as a YAML string."""
        if 'sort_keys' in kwargs:
            return yaml.dump(json.loads(self.json()), *args, **kwargs)
        else:
            return yaml.dump(json.loads(self.json()), *args, sort_keys=False, **kwargs)


