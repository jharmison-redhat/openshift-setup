import inspect
import typer

from pathlib import Path
from typer.main import get_command_name
from typing import Optional
from typing_extensions import Annotated

from .models import Demo
from .utils import make_logger
from .vars import vars

class Cli:
    def __init__(self) -> None:
        self.run = typer.Typer()
        for method, func in inspect.getmembers(self, predicate=inspect.ismethod):
            if not method.startswith("cmd_"):
                continue
            command_name = get_command_name(method.removeprefix("cmd_"))
            self.run.command(name=command_name)(func)

    def cmd_display(
        self,
        demo_file: Path,
        verbose: Annotated[int, typer.Option("--verbose", "-v", count=True)] = 0,
    ) -> None:
        logger = make_logger(verbose)
        logger.debug("Displaying demo")
        from pprint import pprint
        with open(demo_file) as f:
            demo = Demo.from_yaml(f.read())
        pprint(demo.model_dump())

    def cmd_process(
        self,
        demo_file: Path,
        verbose: Annotated[int, typer.Option("--verbose", "-v", count=True)] = 0,
        cluster: Annotated[Optional[str], typer.Option("--cluster", "-c", )] = vars.get("CLUSTER_URL"),
        cluster_dir: Annotated[Optional[Path], typer.Option("--cluster-dir", "-C", exists=True, file_okay=False, dir_okay=True)] = None,
    ) -> None:
        if cluster is None and cluster_dir is None:
            raise RuntimeError(f"Unable to identify ")
        if cluster_dir is None and cluster is not None:
            cluster_dir = Path("clusters").joinpath(cluster)
        logger = make_logger(verbose)
        logger.info(f"Rendering {demo_file} for {cluster}")
        with open(demo_file) as f:
            demo = Demo.from_yaml(f.read())
        demo.render(cluster_dir=cluster_dir)

    def cmd_check_config(
        self,
        verbose: Annotated[int, typer.Option("--verbose", "-v", count=True)] = 0,
    ) -> None:
        logger = make_logger(verbose)
        logger.debug("Displaying config")
        from pprint import pprint
        pprint(dict(vars))
