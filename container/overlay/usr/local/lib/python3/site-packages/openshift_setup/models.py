import yaml

from pathlib import Path
from string import Template
from typing import Any, Dict, List, Optional

from .base import BaseModel
from .utils import make_logger, merge
from .vars import vars

logger = make_logger()


class Namespace(BaseModel):
    name: str
    labels: Optional[Dict[str, str]] = None
    annotations: Optional[Dict[str, str]] = None

    def render(self, cluster_dir: Path | None = None) -> None:
        """Load an application for creating a Namespace."""
        if cluster_dir is None:
            if vars.get("CLUSTER_DIR") is None:
                raise RuntimeError("Unable to determine cluster directory")
            else:
                cluster_dir = Path(vars.get("CLUSTER_DIR", "/"))
        values: Dict[str, str | dict] = {"name": self.name}
        if self.labels is not None:
            values["labels"] = self.labels
        if self.annotations is not None:
            values["annotations"] = self.annotations

        app = Application(
            name="namespace",
            fileprefix=self.name,
            values=values,
            rewrite={
                "metadata": {
                    "name": f"{self.name}-namespace"
                }
            }
        )
        logger.debug(app)
        app.render(cluster_dir=cluster_dir)


class Application(BaseModel):
    name: str
    fileprefix: Optional[str] = None
    rewrite: Dict[str, Any] = {}
    values: Dict[str, Any] = {}
    secrets: Dict[str, Any] = {}

    def load_template(self) -> Dict[str, Any]:
        """Load an ArgoCD Application Template and return its modified form."""
        app_template = Path("applications-templates").joinpath(f"{self.name}.yaml.tpl")
        with open(app_template) as f:
            template_data = Template(f.read())

        logger.debug("Loaded raw app:")
        logger.debug(template_data.safe_substitute())

        subs = {}
        for var in ["CLUSTER_URL", "ARGO_GIT_URL", "ARGO_GIT_REVISION"]:
            if vars.get(var) is not None:
                subs[var] = vars.get(var)
        logger.debug(f" Replacing: {subs}")
        template_data = template_data.safe_substitute(**subs)

        template = yaml.safe_load(template_data)

        if self.rewrite:
            logger.debug(f"Merging in: {self.rewrite}")
        template = merge(template, self.rewrite)

        logger.debug("Rendered app dict:")
        logger.debug(template)

        return template

    def render(self, cluster_dir: Path | None = None) -> None:
        if cluster_dir is None:
            if vars.get("CLUSTER_DIR") is None:
                raise RuntimeError("Unable to determine cluster directory")
            else:
                cluster_dir = Path(vars.get("CLUSTER_DIR", "/"))

        apps_dir = cluster_dir.joinpath("applications")
        apps_dir.mkdir(parents=True, exist_ok=True)

        cluster_yaml = cluster_dir.joinpath("cluster.yaml")
        value_files = []
        if cluster_yaml.exists():
            value_files.append(f"../../{cluster_dir}/cluster.yaml")

        if self.values:
            if self.fileprefix is None:
                values_dir = cluster_dir.joinpath("values").joinpath(self.name)
            else:
                values_dir = cluster_dir.joinpath("values").joinpath(f"{self.fileprefix}-{self.name}")
            values_dir.mkdir(parents=True, exist_ok=True)
            with open(values_dir.joinpath("values.yaml"), "w") as f:
                yaml.dump(self.values, f)
            value_files.append(f"../../{values_dir}/values.yaml")

        if self.secrets:
            if self.fileprefix is None:
                secrets_dir = cluster_dir.joinpath("values").joinpath(self.name)
            else:
                secrets_dir = cluster_dir.joinpath("values").joinpath(f"{self.fileprefix}-{self.name}")
            secrets_dir.mkdir(parents=True, exist_ok=True)
            with open(secrets_dir.joinpath("secrets.yaml"), "w") as f:
                yaml.dump(self.secrets, f)
            value_files.append(f"secrets+age-import:///helm-secrets-private-keys/argo.txt?../../{secrets_dir}/secrets.enc.yaml")

        if self.fileprefix is None:
            app_path = apps_dir.joinpath(f"{self.name}.yaml")
        else:
            app_path = apps_dir.joinpath(f"{self.fileprefix}-{self.name}.yaml")

        if value_files:
            self.rewrite = merge(self.rewrite, {
                "spec": {
                    "source": {
                        "helm": {
                            "valueFiles": value_files
                        }
                    }
                }
            })
        app = self.load_template()

        with open(app_path, "w") as f:
            yaml.dump(app, f)


class Demo(BaseModel):
    namespaces: List[Namespace] = []
    applications: List[Application] = []

    def render(self, cluster_dir: Path | None = None) -> None:
        if cluster_dir is None:
            if vars.get("CLUSTER_DIR") is None:
                raise RuntimeError("Unable to determine cluster directory")
            else:
                cluster_dir = Path(vars.get("CLUSTER_DIR", "/"))

        for namespace in self.namespaces:
            logger.debug(f"Rendering {namespace.name} namespace")
            namespace.render()
        for application in self.applications:
            logger.debug(f"Rendering {application.name} application")
            application.render()
