import logging
import logging.handlers
import sys
from pathlib import Path
from typing import Optional


def make_logger(verbosity: Optional[int] = None) -> logging.Logger:
    """Make a consistent logger that respects persistent verbosity settings."""
    logger = logging.getLogger("openshift-setup")
    logger.setLevel(logging.DEBUG)

    if len(logger.handlers) ==0:
        _format = "{asctime} {name} [{levelname:^9s}]: {message}"
        formatter = logging.Formatter(_format, style="{")

        stderr = logging.StreamHandler(stream=sys.stderr)
        stderr.setFormatter(formatter)
        if verbosity is not None:
            stderr.setLevel(40 - (min(3, verbosity) * 10))
        else:
            stderr.setLevel(40)
        logger.addHandler(stderr)
    else:
        if verbosity is not None:
            stderr = logger.handlers[0]
            # Never lower the verbosity after it's been made high
            stderr.setLevel(min(stderr.level, 40 - (min(3, verbosity) * 10)))

    return logger


logger = make_logger()

def merge(a: dict, b: dict, path: list | None = None):
    if path is None:
        path = []
    for key in b:
        if key in a:
            if isinstance(a[key], dict) and isinstance(b[key], dict):
                merge(a[key], b[key], path + [str(key)])
            elif isinstance(a[key], list) and isinstance(b[key], list):
                logger.debug(f"Extending {a[key]} with {b[key]} at {path + [str(key)]}")
                a[key].extend([v for v in b[key] if v not in a[key]])
            else:
                logger.debug(f"Replacing {a[key]} with {b[key]} at {path + [str(key)]}")
                a[key] = b[key]
        else:
            a[key] = b[key]
    return a
