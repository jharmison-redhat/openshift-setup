import os

from dotenv import dotenv_values
from pathlib import Path

from .makefile import Makefile

class SetupVariables:
    def __init__(self, dotenv: Path = Path('.env'), makefile: Path = Path('Makefile')) -> None:
        self.dotenv = dotenv
        self.makefile = makefile
        self.values = {}

        # Read the dotenv first
        if dotenv.exists():
            self.values.update(dotenv_values(dotenv))

        # Override dotenv files from the environment
        self.load_environ()

        # Read the Makefile variables if they exist
        if makefile.exists():
            self.values.update(Makefile(makefile, starting_vars=self.values.copy()).read())

        # Check for a valid cluster dotenv
        cluster_url = self.values.get("CLUSTER_URL")
        if cluster_url is not None:
            self.cluster_dotenv = Path("install").joinpath(f"{cluster_url}.env")
            if self.cluster_dotenv.exists():
                self.values.update(dotenv_values(self.cluster_dotenv))
        else:
            self.cluster_dotenv = None

        # Get rid of strange exported duplicates
        clean = {}
        for k, v in self.values.items():
            if not k.startswith("export "):
                clean[k] = v
        self.values = clean

    def load_environ(self) -> None:
        envs_to_copy = [
            'CLUSTER_NAME',
            'BASE_DOMAIN',
            'AWS_REGION',
            'CONTROL_PLANE_TYPE',
            'CONTROL_PLANE_COUNT',
            'WORKER_TYPE',
            'WORKER_COUNT',
            'ARGO_GIT_URL',
            'ARGO_GIT_REVISION',
            'ARGO_APPLICATIONS',
            'CLUSTER_VERSION',
            'ACME_EMAIL',
            'ACME_DISABLE_ACCOUNT_KEY_GENERATION',
            'RECOVER_INSTALL',
        ]
        self.values.update({var: os.environ.get(var) for var in envs_to_copy if os.environ.get(var) is not None})


vars = SetupVariables().values
