# Copyright (c) 2019-2021, NVIDIA CORPORATION. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of NVIDIA CORPORATION nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
# OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Creates a deployment for the Triton Inference Server pods
# Each pod contains a Triton container and an nfs mount as specified in
# values.yaml for the model repository (if the modelRepository.type is
# set to nfs)

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "triton-inference-server.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ template "triton-inference-server.name" . }}
    chart: {{ template "triton-inference-server.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.autoscaling.minReplicas }}
  {{- with .Values.deployment.strategy }}
  strategy:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ template "triton-inference-server.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "triton-inference-server.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ template "triton-inference-server.fullname" . }}
      {{- /*
      We'll need to add other supported modelRepository types to ensure we're
      wiring the volumes up correctly
      */}}
      {{- with .Values.modelRepository }}
      {{- if eq .type "nfs" }}
      volumes:
        - name: models
          nfs:
            server: {{ .nfs.server }}
            path: {{ .nfs.path }}
            readOnly: {{ .nfs.readOnly }}
      {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.modelRepository }}
          {{- if eq .type "nfs" }}
          volumeMounts:
            - mountPath: /models
              name: models
          {{- end }}
          {{- end }}
          resources:
            limits:
              nvidia.com/gpu: {{ .Values.deployment.numGpus }}
          args:
            - tritonserver
            {{- /*
            We need to confirm the modelRepository type because some won't have
            a mountPath at all, e.g. S3
            */}}
            {{- with .Values.modelRepository }}
            {{- if eq .type "nfs" }}
            - --model-repository={{ .mountPath }}
            {{- else if eq .type "s3" }}
            - --model-repository={{ include "triton-inference-server.s3url" $ }}
            {{- end }}
            {{- end }}
            {{- with .Values.deployment.extraArgs }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          ports:
            - containerPort: 8000
              name: http
            - containerPort: 8001
              name: grpc
            - containerPort: 8002
              name: metrics
          livenessProbe:
            initialDelaySeconds: 15
            failureThreshold: 3
            periodSeconds: 10
            httpGet:
              path: /v2/health/live
              port: http
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 3
            httpGet:
              path: /v2/health/ready
              port: http
          startupProbe:
            # allows Triton to load the models during 30*10 = 300 sec = 5 min
            # starts checking the other probes only after the success of this one
            # for details, see https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#define-startup-probes
            periodSeconds: 10
            failureThreshold: 30
            httpGet:
              path: /v2/health/ready
              port: http
      {{- with .Values.deployment.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        runAsUser: {{ .Values.deployment.uid }}
        fsGroup: {{ .Values.deployment.uid }}
